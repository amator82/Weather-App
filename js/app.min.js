/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/apikey.js":
/*!**************************!*\
  !*** ./src/js/apikey.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst API_KEY = 'e7e97a51b9194b3b05595013b2998657'\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API_KEY);\r\n\n\n//# sourceURL=webpack://06_gulp/./src/js/apikey.js?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _apikey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apikey.js */ \"./src/js/apikey.js\");\n\r\n\r\nconst link = `http://api.weatherstack.com/current?access_key=${_apikey_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]}`\r\n\r\nconst root = document.getElementById('root')\r\nconst popup = document.getElementById('popup')\r\nconst popupClose = document.getElementById('close')\r\nconst textInput = document.getElementById('text-input')\r\nconst form = document.getElementById('form')\r\n\r\nlet store = {\r\n    city: ' Alaska',\r\n    feelsLike: 0,\r\n    temperature: 0,\r\n    observationTime: '00:00 AM',\r\n    isDay: 'yes',\r\n    weatherDescriptions: '',\r\n    properties: {\r\n        windSpeed: {},\r\n        humidity: {},\r\n        visibility: {},\r\n        cloudCover: {},\r\n        pressure: {},\r\n        uvIndex: {}\r\n    }\r\n}\r\n\r\nconst fetchData = async () => {\r\n    try {\r\n        const query = localStorage.getItem('query') || store.city\r\n        \r\n        const result = await fetch(`${link}&query=${query}`)\r\n        const data = await result.json()\r\n\r\n        const {\r\n            current: {\r\n                feelslike: feelsLike,\r\n                cloudcover: cloudCover,\r\n                temperature,\r\n                humidity,\r\n                observation_time: observationTime,\r\n                pressure,\r\n                visibility,\r\n                uv_index: uvIndex,\r\n                is_day: isDay,\r\n                weather_descriptions: weatherDescriptions,\r\n                wind_speed: windSpeed\r\n            },\r\n            location: { name }\r\n        } = data\r\n\r\n        store = {\r\n            ...store,\r\n            feelsLike,\r\n            temperature,\r\n            observationTime,\r\n            isDay,\r\n            city: name,\r\n            weatherDescriptions: weatherDescriptions[0],\r\n            properties: {\r\n                windSpeed: {\r\n                    title: 'windSpeed',\r\n                    value: `${windSpeed}km/h`,\r\n                    icon: 'wind.png'\r\n                },\r\n                humidity: {\r\n                    title: 'humidity',\r\n                    value: `${humidity}%`,\r\n                    icon: 'humidity.png'\r\n                },\r\n                visibility: {\r\n                    title: 'visibility',\r\n                    value: `${visibility}%`,\r\n                    icon: 'visibility.png'\r\n                },\r\n                cloudCover: {\r\n                    title: 'cloudCover',\r\n                    value: `${cloudCover}%`,\r\n                    icon: 'cloud.png'\r\n                },\r\n                pressure: {\r\n                    title: 'pressure',\r\n                    value: `${pressure / 100} `,\r\n                    icon: 'gauge.png'\r\n                },\r\n                uvIndex: {\r\n                    title: '',\r\n                    value: `${uvIndex}`,\r\n                    icon: 'uv-index.png'\r\n                }\r\n            }\r\n        }\r\n        renderComponents()\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nconst getImage = (weatherDescriptions) => {\r\n    const value = weatherDescriptions.toLowerCase()\r\n\r\n    switch (value) {\r\n        case 'overcast':\r\n            return 'partly.png'\r\n        case 'sunny':\r\n            return 'sunny.png'\r\n        case 'cloud':\r\n            return 'cloud.png'\r\n        case 'partly cloudy':\r\n            return 'cloud.png'\r\n        case 'fog':\r\n            return 'fog.png'\r\n        case 'clear':\r\n            return 'clear.png'\r\n        default:\r\n            return 'the.png'\r\n    }\r\n}\r\n\r\nconst renderProperty = (properties) => {\r\n    return Object.values(properties)\r\n        .map(({ title, value, icon }) => {\r\n            return `\r\n            <div class=\"property\">\r\n                <div class=\"property__icon\">\r\n                    <img src=\"../../img/icons/${icon}\" alt=\"\" />\r\n                </div>\r\n                <div class=\"property__info info-property\">\r\n                    <div class=\"property-info__value\">${value}</div>\r\n                    <div class=\"property-info__description\">${title}</div>\r\n                </div>\r\n            </div>\r\n            `\r\n        })\r\n        .join('')\r\n}\r\n\r\nconst markup = () => {\r\n    const {\r\n        city,\r\n        weatherDescriptions,\r\n        observationTime,\r\n        temperature,\r\n        isDay,\r\n        properties\r\n    } = store\r\n\r\n    const containerClass = isDay === 'yes' ? 'is-day' : ''\r\n\r\n    return `\r\n    <div class=\"container ${containerClass}\">\r\n        <div class=\"top\">\r\n            <div class=\"city\">\r\n                <div class=\"city__subtitle\">Weather today in</div>\r\n                <div class=\"city__title\" id=\"city\">\r\n                    <span>${city}</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"city__info info-city\">\r\n                <div class=\"top-left\">\r\n                    <img class=\"icon\" src=\"../../img/${getImage(\r\n                        weatherDescriptions\r\n                    )}\" alt=\"\" />\r\n                    <div class=\"description\">${weatherDescriptions}</div>\r\n                </div>\r\n                <div class=\"top-right\">\r\n                    <div class=\"info-city__subtitle\">\r\n                        as of ${observationTime}\r\n                    </div>\r\n                    <div class=\"info-city__title\">${temperature}Â°</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div id=\"properties\">${renderProperty(properties)}</div>\r\n    </div>`\r\n}\r\n\r\nconst togglePopupClass = () => {\r\n    popup.classList.toggle('active')\r\n}\r\n\r\nconst renderComponents = () => {\r\n    root.innerHTML = markup()\r\n\r\n    const city = document.getElementById('city')\r\n    city.addEventListener('click', togglePopupClass)\r\n}\r\n\r\nconst handleInput = (e) => {\r\n    store = {\r\n        ...store,\r\n        city: e.target.value\r\n    }\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const value = store.city\r\n\r\n    if (!value) return null\r\n\r\n    localStorage.setItem('query', value)\r\n    fetchData()\r\n    togglePopupClass()\r\n}\r\n\r\nform.addEventListener('submit', handleSubmit)\r\ntextInput.addEventListener('input', handleInput)\r\npopupClose.addEventListener('click', (e) => {\r\n    popup.classList.remove('popup')\r\n    popup.classList.add('popup-close')\r\n})\r\n\r\nfetchData()\r\n\n\n//# sourceURL=webpack://06_gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;